#!/bin/bash

# Copyright (c) 2007-2011, Brane F. Gracnar
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Brane F. Gracnar nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY Brane F. Gracnar ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Brane F. Gracnar BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#
# WHAT:		Customizable iptables firewall rule generator
# AUTHOR:	Brane F. Gracnar
#

# Redhat/CentOS stuff...
# chkconfig:   - 85 15
# description:  P9 simple iptables abstraction firewall

# LSB stuff

### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $remote_fs $syslog ulogd2
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: P9 simple iptables abstraction firewall
# Description: P9 simple iptables abstraction firewall
### END INIT INFO

#################################################
#                   GLOBALS                     #
#################################################

# Enable IPv4 firewall?
IPV4_FIREWALL="1"

# Enable IPv4 firewall?
IPV6_FIREWALL="1"

# enable IPv4 packet forwarding?
IPV4_FORWARDING="0"

# enable IPv6 packet forwarding?
IPV6_FORWARDING="0"

# ulog netlink group
NFLOG_GROUP_ULOG="0"

# nflog netlink group for IPv4 logging
NFLOG_GROUP_V4="0"

# nflog netlink group for IPv6 logging
NFLOG_GROUP_V6="1"

# state directory
STATE_DIR="/var/lib/p9-firewall"

#################################################
#                  FUNCTIONS                    #
#################################################
MYNAME=$(basename $0)
VERSION="0.42"
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
export PATH

FW_CONFDIR=""
FW_CHAINDIR=""
FW_DEFINES=""
IPTABLES=""
IPTABLES6=""
IPTABLES_SAVE=""
IPTABLES_RESTORE=""
IPTABLES6_SAVE=""
IPTABLES6_RESTORE=""
fw=""
fw6=""
IPROUTE2=""
ip=""

CHAIN=""
CURRENT_CHAIN=""

LOCK_FILE="/tmp/.${MYNAME}.lock"
FORCE_RECALCULATION=0

_MTIME=""
_LOCK_OK="0"

tty_colors_init() {
	# stdout and stderr *must* be
	# tty in order to install real shell
	# color codes...
	if [ -t 1 -a -t 2 ]; then
		TERM_WHITE="\033[1;37m"
		TERM_YELLOW="\033[1;33m"
		TERM_LPURPLE="\033[1;35m"
		TERM_LRED="\033[1;31m"
		TERM_LCYAN="\033[1;36m"
		TERM_LGREEN="\033[1;32m"
		TERM_LBLUE="\033[1;34m"
		TERM_DGRAY="\033[1;30m"
		TERM_GRAY="\033[0;37m"
		TERM_BROWN="\033[0;33m"
		TERM_PURPLE="\033[0;35m"
		TERM_RED="\033[0;31m"
		TERM_CYAN="\033[0;36m"
		TERM_GREEN="\033[0;32m"
		TERM_BLUE="\033[0;34m"
		TERM_BLACK="\033[0;30m"
		TERM_BOLD="\033[40m\033[1;37m"
		TERM_RESET="\033[0m"
	fi
}

die() {
	echo -e "${TERM_LRED}FATAL:  ${TERM_RESET}$@"
	do_cleanup
	exit 1
}

msg_warn() {
	echo -e "${TERM_YELLOW}WARNING: ${TERM_RESET}$@"
}

do_cleanup() {
	lock_release
}

lock_get() {
	test "${_LOCK_OK}" = "1" && return 0

	# does file exist?
	if [ -f "${LOCK_FILE}" ]; then
		# get mtime
		file_mtime "${LOCK_FILE}" || die "Unable to get lock file mtime."
		local mtime="${_MTIME}"
		local time=$(date +%s)

		# read pid (if any)
		local pid=$(head -n 1 "${LOCK_FILE}" | awk '{print $1}')

		# no pid?
		if [ ! -z "${pid}" ]; then
			# check if this pid is alive...
			if kill -0 "${pid}" >/dev/null 2>&1; then
				# maybe this is another process with the same pid...
				# our script *cannot* run more than 2 minutes...
				local timeout=$((${mtime} + 120))
				if [ ${timeout} -gt ${time} ]; then
					die "Unable to obtain lock: process ${pid} is holding the lock."
				fi
			fi
		fi
		msg_warn "Removing invalid lock file."
		rm -f "${LOCK_FILE}"
	fi

	# write lock file
	echo $$ > "${LOCK_FILE}" || die "Unable to write lock file: ${LOCK_FILE}"
	_LOCK_OK="1"
	return 0
}

lock_release() {
	if [ "${_LOCK_OK}" = "1" ]; then
		rm -f "${LOCK_FILE}" >/dev/null 2>&1
	fi
}

configdir_discover() {
	local dir=$(dirname $0)
	local self=$(readlink -f "$0" 2>/dev/null)
	test -z "${self}" && die "Unable to find script path."

	# compute configuration directory...
	if [ "${dir:0:4}" = "/etc" -o "${dir:0:4}" = "/usr" ]; then
		FW_CONFDIR="/etc/firewall"
	else
		FW_CONFDIR=$(dirname "${self}")
		FW_CONFDIR=$(readlink -f "${FW_CONFDIR}/../conf")
	fi

	export FW_CONFDIR
	return 0
}

get_env_val()  {
	local name=$1
	local val=""
	val=$(set 2>/dev/null | egrep "^${name}\\=" | cut -d= -f2)
	echo $val
}

iptables_discover() {
	local x=""
	local x=$(which iptables 2>/dev/null)
	test $? -eq 0 || die "Unable to find iptables in \$PATH: $PATH"
	IPTABLES="$x"
	local dir=$(dirname "${IPTABLES}")
	IPTABLES6="${dir}/ip6tables"

	IPTABLES_SAVE="${dir}/iptables-save"
	IPTABLES_RESTORE="${dir}/iptables-restore"

	IPTABLES6_SAVE="${dir}/ip6tables-save"
	IPTABLES6_RESTORE="${dir}/ip6tables-restore"

	fw="$IPTABLES"
	fw6="${IPTABLES6}"
	export IPTABLES fw IPTABLES6 fw6
}

iproute2_discover() {
	local x=$(which ip 2>/dev/null)
	test $? -eq 0 || die "Unable to find iproute2 utilities in \$PATH: $PATH"

	ip="$x"
	IPROUTE2="$x"
}

iproute2_start() {
	echo -ne "  Initializing iproute2 advanced routing rules: "
	local file="${FW_CONFDIR}/iproute2/iproute2.start"

	if [ ! -f "$file" -o ! -r "$file" ]; then
		echo "No special startup routing rules, done."
		return 0
	fi

	# run the goddamn file
	. "$file"
	
	echo "done."
	return 0
}

iproute2_stop() {
	true
	echo -ne "  Removing iproute2 advanced routing rules: "
	local file="${FW_CONFDIR}/iproute2/iproute2.stop"

	if [ ! -f "$file" -o ! -r "$file" ]; then
		echo "No special shutdown routing rules, done."
		return 0
	fi

	# run the goddamn file
	. "$file"
	
	echo "done."
	return 0
	
}

firewall_init() {
	# initialize base dir dependent variables
	FW_CHAINDIR="${FW_CONFDIR}/chains"
	FW_DEFINES="${FW_CONFDIR}/DEFINES.conf"

	# check for important files
	test -d "${FW_CHAINDIR}" || die "Chain directory '${FW_CHAINDIR}' is invalid."
	test -f "${FW_DEFINES}" -a -r "${FW_DEFINES}" || die "Variable configuration file '${FW_DEFINES}' is invalid."
	
	# look for iptables
	iptables_discover

	# look for iproute2
	iproute2_discover
}

chains_create() {
	# check for custom chain existence
	if [ $(ls $FW_CHAINDIR/*.chain{,.filter,.nat,.mangle,.raw} 2>/dev/null | wc -l) = "0" ]; then
		echo -e "  ${TERM_YELLOW}WARNING:${TERM_RESET} No custom chains defined."
		return 0
	fi

	for table in filter nat raw mangle; do
		CURRENT_TABLE="${table}"
		TABLE="${table}"
		echo -e "  Creating chains for table ${TERM_BOLD}${TABLE}${TERM_RESET}:"

		if [ "${table}" = "filter" ]; then
			table=""
		else
			table=".${table}"
		fi
	
		# only create chains...
		local f=""
		for f in $FW_CHAINDIR/*.chain${table}; do
			local chain=$(basename "${f}")
			chain=$(echo "${chain}" | cut -d. -f1)
			if [ "${chain}" = "*" ]; then
				continue
			fi

			# create ipv4 and ipv6 chains
			${IPTABLES} -t "${TABLE}" -N "${chain}" >/dev/null 2>&1
			${IPTABLES6} -t "${TABLE}" -N "${chain}" >/dev/null 2>&1
		done

		# fill chains...
		for f in $FW_CHAINDIR/*.chain${table}; do
			local chain=$(basename "${f}")
			chain=$(echo "${chain}" | cut -d. -f1)
			if [ "${chain}" = "*" ]; then
				continue
			fi
			echo -e "        ${TERM_BOLD}${chain}${TERM_RESET}"
			CURRENT_CHAIN="${chain}"
			CHAIN="${chain}"
			export CHAIN CURRENT_CHAIN

			# load chain rules
			. "${f}"
		done
	done

	unset CHAIN CURRENT_CHAIN TABLE CURRENT_TABLE
}

chains_remove() {
	local chain=""
	local table=""
	for table in filter nat raw mangle; do
		echo -e "  Removing chains from table ${TERM_BOLD}${table}${TERM_RESET}:"
		for chain in $(${IPTABLES} -t ${table} -nL | grep '^Chain ' | awk '{print $2}'); do
			# echo -e "        ${TERM_BOLD}${chain}${TERM_RESET}"

			# try to set policy to accept.
			# well, this command will fail on all non-built-in
			# chains.
			${IPTABLES} -t "${table}" -P "${chain}" ACCEPT > /dev/null 2>&1
			${IPTABLES6} -t "${table}" -P "${chain}" ACCEPT > /dev/null 2>&1

			# flush chain first
			${IPTABLES} -t "${table}" -F "${chain}" > /dev/null 2>&1
			${IPTABLES6} -t "${table}" -F "${chain}" > /dev/null 2>&1

			# delete chain
			${IPTABLES} -t "${table}" -X "${chain}" > /dev/null 2>&1
			${IPTABLES6} -t "${table}" -X "${chain}" > /dev/null 2>&1
		done
	done
}

chains_save() {
	# check state directory...
	test -z "${STATE_DIR}" && die "Invalid configuration: STATE_DIR is not specified."
	if [ ! -d "${STATE_DIR}" ]; then
		mkdir -p "${STATE_DIR}" || die "Unable to create state directory: ${STATE_DIR}"
	fi

	if [ "${IPV4_FIREWALL}" = "1" ]; then
		echo -n "  Saving IPv4 rules: "
		${IPTABLES_SAVE} > "${STATE_DIR}/rules.ipv4" || die "Unable to save iptables ipv4 rules."
		echo "done."
	fi
	if [ "${IPV6_FIREWALL}" = "1" ]; then
		echo -n "  Saving IPv6 rules: "
		${IPTABLES6_SAVE} > "${STATE_DIR}/rules.ipv6" || die "Unable to save iptables ipv6 rules."
		echo "done."
	fi
	return 0
}

chains_load() {
	if [ "${IPV4_FIREWALL}" = "1" ]; then
		echo -n "  Loading IPv4 rules: "
		${IPTABLES_RESTORE} < "${STATE_DIR}/rules.ipv4" || die "Unable to save iptables ipv4 rules."
		echo "done."
	fi
	if [ "${IPV6_FIREWALL}" = "1" ]; then
		echo -n "  Loading IPv6 rules: "
		${IPTABLES6_RESTORE} < "${STATE_DIR}/rules.ipv6" || die "Unable to save iptables ipv6 rules."
		echo "done."
	fi
	return 0
}

add_rule_full() {
	# is enabled?
	if [ "${IPV4_FIREWALL}" != "1" ]; then
		msg_warn "IPv4 firewall is disabled, ignoring: add_rule_full $@"
		return 0
	fi

	local table="${1}"
	shift
	local ch="${1}"
	shift
	local cmd="$@"
	local err=""
	err=$($IPTABLES -t ${table} -A ${ch} $cmd 2>&1)
	local rv=$?

	if [ ${rv} -ne 0 ]; then
		err=$(echo $err | sed -e 's/^/ /g')
		echo "           ERROR adding rule [-t ${table} -A ${ch} $cmd]: $err"
		return 1
	fi

	return 0
}

add_rule() {
	# is enabled?
	if [ "${IPV4_FIREWALL}" != "1" ]; then
		msg_warn "IPv4 firewall is disabled, ignoring: add_rule $@"
		return 0
	fi
	add_rule_full ${CURRENT_TABLE} ${CURRENT_CHAIN} $@
}

add_rule6() {
	# is enabled?
	if [ "${IPV6_FIREWALL}" != "1" ]; then
		msg_warn "IPv6 firewall is disabled, ignoring: add_rule6 $@"
		return 0
	fi
	add_rule6_full "${CURRENT_TABLE}" "${CURRENT_CHAIN}" $@
}

add_rule6_full() {
	# is enabled?
	if [ "${IPV6_FIREWALL}" != "1" ]; then
		msg_warn "IPv6 firewall is disabled, ignoring: add_rule6_full $@"
		return 0
	fi
	local table="${1}"
	shift
	local ch="${1}"
	shift
	local cmd="$@"
	local err=""
	err=$($IPTABLES6 -t ${table} -A ${ch} $cmd 2>&1)
	local rv=$?

	if [ ${rv} -ne 0 ]; then
		err=$(echo $err | sed -e 's/^/ /g')
		echo "           ERROR adding rule6 [-t ${table} -A ${ch} $cmd]: $err"
		return 1
	fi

	return 0
}

add_rule_log_get_log_rule() {
	local c=""
	local rule=""
	
	while [ $# -gt 0 ]; do
		c="${1}"
		shift

		if [ "${c}" = "-j" ]; then
			break
		else
			rule="${rule} ${c}"
		fi
	done

	echo "${rule}"
}

add_rule_log_get_prefix() {
	local c=""
	prefix=""

	while [ $# -gt 0 ]; do
		c="${1}"
		shift

		if [ "${c}" = "-j" ]; then
			prefix="${CURRENT_CHAIN}_${1}"
			break
		fi
	done

	echo "${prefix}"
}

add_rule_log_prefix() {
	# is enabled?
	if [ "${IPV4_FIREWALL}" != "1" ]; then
		msg_warn "IPv4 firewall is disabled, ignoring: add_rule_log_prefix $@"
		return 0
	fi

	local prefix="${1}"
	shift

	if [ -z "${prefix}" ]; then
		prefix=$(add_rule_log_get_prefix $@)
	fi

	local log_rule=$(add_rule_log_get_log_rule $@)

	add_rule_full ${CURRENT_TABLE} ${CURRENT_CHAIN} "${log_rule}" "-j ULOG --ulog-prefix=${prefix}"
	add_rule_full ${CURRENT_TABLE} ${CURRENT_CHAIN} $@
}

add_rule6_log_prefix() {
	# is enabled?
	if [ "${IPV6_FIREWALL}" != "1" ]; then
		msg_warn "IPv6 firewall is disabled, ignoring: add_rule6_log_prefix $@"
		return 0
	fi
	local prefix="${1}"
	shift

	if [ -z "${prefix}" ]; then
		prefix=$(add_rule_log_get_prefix $@)
	fi

	local log_rule=$(add_rule_log_get_log_rule $@)

	add_rule6_full "${CURRENT_TABLE}" "${CURRENT_CHAIN}" "${log_rule}" "-j LOG --log-prefix=${prefix}"
	add_rule6_full "${CURRENT_TABLE}" "${CURRENT_CHAIN}" $@
}

add_rule_log() {
	# is enabled?
	if [ "${IPV4_FIREWALL}" != "1" ]; then
		msg_warn "IPv4 firewall is disabled, ignoring: add_rule_log $@"
		return 0
	fi
	local prefix=$(add_rule_log_get_prefix $@)
	local log_rule=$(add_rule_log_get_log_rule $@)

	add_rule_full ${CURRENT_TABLE} ${CURRENT_CHAIN} "${log_rule}" "-j NFLOG --nflog-group=$NFLOG_GROUP_V4 --nflog-prefix=${prefix}"
	add_rule_full ${CURRENT_TABLE} ${CURRENT_CHAIN} $@
}

add_rule6_log() {
	# is enabled?
	if [ "${IPV6_FIREWALL}" != "1" ]; then
		msg_warn "IPv6 firewall is disabled, ignoring: add_rule6_log $@"
		return 0
	fi
	local prefix=$(add_rule_log_get_prefix $@)
	prefix="${prefix} "
	local log_rule=$(add_rule_log_get_log_rule $@)

	add_rule6_full "${CURRENT_TABLE}" "${CURRENT_CHAIN}" "${log_rule}" "-j NFLOG --nflog-group=$NFLOG_GROUP_V6 --nflog-prefix=${prefix}"
	add_rule6_full "${CURRENT_TABLE}" "${CURRENT_CHAIN}" $@
}

forwarding_stop() {
	echo "  Disabling IPv4 packet forwarding."
	sysctl -w net.ipv4.ip_forward=0 > /dev/null 2>&1

	echo "  Disabling IPv6 packet forwarding."
	sysctl -w net.ipv6.conf.all.forwarding=0 > /dev/null 2>&1
}

forwarding_start() {
	if [ "${IPV4_FORWARDING}" = "1" ]; then
		echo "  Enabling IPv4 packet forwarding."
		sysctl -w net.ipv4.ip_forward=1 > /dev/null 2>&1
	else
		sysctl -w net.ipv4.ip_forward=0 > /dev/null 2>&1
	fi
	if [ "${IPV6_FORWARDING}" = "1" ]; then
		echo "  Enabling IPv6 packet forwarding."
		sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null 2>&1
	else
		sysctl -w net.ipv6.conf.all.forwarding=0 > /dev/null 2>&1
	fi
}

file_mtime() {
	_MTIME=$(stat -c "%Y" "${1}" 2>/dev/null)
	rv=$?
	test -z "${_MTIME}" && _MTIME=0
	return $rv
}

chains_need_recalculation() {
	# force recalculation?
	test "${FORCE_RECALCULATION}" = "1" && return 0

	# get mtime for ipv4 rules
	file_mtime "${STATE_DIR}/rules.ipv4"
	local mtime_ipv4="${_MTIME}"

	# get mtime for ipv6 rules
	file_mtime "${STATE_DIR}/rules.ipv6"
	local mtime_ipv6="${_MTIME}"

	local table=""
	for table in filter nat raw mangle; do
		if [ "${table}" = "filter" ]; then
			table=""
		else
			table=".${table}"
		fi
	
		# check chain files
		local f=""
		for f in "${FW_DEFINES}" ${FW_CHAINDIR}/*.chain${table}; do
			file_mtime "${f}" || continue
			local mt="${_MTIME}"
			
			if [ "${IPV4_FIREWALL}" = "1" ]; then
				if [ "${mtime_ipv4}" = "0" -o ${mtime_ipv4} -lt ${mt} ]; then
					return 0
				fi
			fi
			if [ "${IPV6_FIREWALL}" = "1" ]; then
				if [ "${mtime_ipv6}" = "0" -o ${mtime_ipv6} -lt ${mt} ]; then
					return 0
				fi
			fi
		done
	done

	# no need for recalculation...
	return 1
}

firewall_start() {
	lock_get || die
	echo -e "${TERM_YELLOW}Starting FIREWALL:${TERM_RESET}"
	logger "STARTING FIREWALL..."

	# load defines
	echo "  Loading configuration variables."
	. "${FW_DEFINES}" >/dev/null 2>&1

	local reloaded=0
	if chains_need_recalculation; then
		# create chains
		chains_create
	else
		echo "  Chains don't need recalculation, reloading saved rules."
		# just load the goddamn saved chains...
		if chains_load; then
			reloaded=1
		else
			chains_remove >/dev/null 2>&1
			chains_remove >/dev/null 2>&1
			chains_create
		fi
	fi

	# initialize iproute2
	iproute2_start

	# start packet forwarding
	forwarding_start

	logger "FIREWALL STARTED."

	# save chains
	if [ "${reloaded}" != "1" ]; then
		chains_save
	fi

	# echo "DONE."
}

firewall_stop() {
	lock_get || die
	echo -e "${TERM_YELLOW}Stopping FIREWALL:${TERM_RESET}"
	logger "STOPPING FIREWALL."

	# disable packet forwarding
	forwarding_stop

	echo -n "  Unlocking main chain policies: ["
	local chain=""
	for chain in INPUT FORWARD OUTPUT; do
		echo -ne " ${TERM_BOLD}${chain}${TERM_RESET}"
		${IPTABLES} -t filter -P ${chain} ACCEPT > /dev/null 2>&1
	done
	echo " ] done."
	
	chains_remove

	# remove any chains possibly left becouse of chain
	# cross references
	chains_remove > /dev/null 2>&1
	
	# remove iproute2 rules
	iproute2_stop

	logger "FIREWALL STOPPED."

	# echo "DONE."
}

firewall_status() {
	local ipv4="off"
	if iptables-save | grep -q -- '^-A '; then
		ipv4="on"
	fi

	local ipv6="off"
	if ip6tables-save | grep -q -- '^-A '; then
		ipv6="on"
	fi
	
	local rv=0

	if [ "${IPV4_FORWARDING}" = "1" ]; then
		if [ "${ipv4}" = "off" ]; then
			rv=1
		fi
	else
#		if [ "${ipv4}" = "on" ]; then
#			msg_warn "IPv4 forwarding is disabled, but there are active IPv4 rules."
#		fi
		true
	fi

	if [ "${IPV6_FORWARDING}" = "1" ]; then
		if [ "${ipv6}" = "off" ]; then
			rv=1
		fi
	else
#		if [ "${ipv6}" = "on" ]; then
#			msg_warn "IPv6 forwarding is disabled, but there are active IPv6 rules."
#		fi
		true
	fi
	
	echo "IPv4 firewall: ${ipv4}"
	echo "IPv6 firewall: ${ipv6}"
	
	return $rv
}

printhelp() {
	echo -e "${TERM_BOLD}Usage:${TERM_RESET} ${TERM_LGREEN}$MYNAME${TERM_RESET} [OPTIONS] {start|stop|restart|force-restart|status|dump|dump6|version}"
	echo ""
	echo "This is customizeable iptables rule generator script for Linux"
	echo "firewalls."
	echo ""
	echo -e "${TERM_BOLD}OPTIONS:${TERM_RESET}"
	echo ""
	echo "  -C    --conf-dir=DIR   Configuration directory (Default: \"${FW_CONFDIR}\")"
	echo ""
	echo "  -d    --debug          Debugging mode"
	echo "  -V    --version        Prints out script version"
	echo "  -h    --help           This help message"
}

#################################################
#                    MAIN                       #
#################################################

# initialize shell colours...
tty_colors_init

# get configuration directory...
configdir_discover

firewall_init

# parse command line
TEMP=$(getopt -o C:dVh --long config-dir:,debug,version,help -n "$MYNAME" -- "$@")
eval set -- "$TEMP"
while true; do
	case ${1} in
		-C|--config-dir)
			FW_CONFDIR="${2}"
			firewall_init
			shift 2
			;;
		-d|--debug)
			shift
			set -x
			;;
		-V|--version)
			printf "%s %-.2f\n" "${MYNAME}" "${VERSION}"
			exit 0
			;;
		--)
			shift
			break
			;;
		-h|--help)
			printhelp
			exit 0
			;;
	esac
done

# we must be r00t to do that
test $(id -u) = "0" || die "You must be ${TERM_LRED}r00t${TERM_RESET} to manipulate firewall."
test $(uname -s) = "Linux" || die "This script works only on ${TERM_BOLD}Linux${TERM_RESET} operating system."

if [ -z "${1}" ]; then
	printhelp
	exit 1
fi

# check how we were called...
case $1 in
	start)
		firewall_start
		;;

	stop)
		firewall_stop
		;;

	restart)
		firewall_stop
		echo ""
		firewall_start
		;;

	force-restart)
		FORCE_RECALCULATION=1
		firewall_stop
		echo ""
		firewall_start
		;;

	status)
		firewall_status
		;;

	dump)
		${IPTABLES_SAVE}
		;;
	
	dump6)
		${IPTABLES6_SAVE}
		;;

	version)
		printf "%s %-.2f\n" "${MYNAME}" "${VERSION}"
		exit 0
		;;

	help)
		printhelp
		exit 0
		;;

	*)
		echo "Invalid command line options. Run $MYNAME -h for instructions."
		exit 1
		;;
esac

# save exit code...
rv=$?

# perform cleanup
do_cleanup

# exit
exit $rv

# EOF
